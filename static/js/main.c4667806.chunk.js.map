{"version":3,"sources":["logo.svg","Views/Home/home.style.js","Views/Home/home.js","serviceWorker.js","index.js"],"names":["module","exports","Background","styled","div","NavBar","ItemsMenu","a","ContainerHome","ContainerWelcome","ContainerApresentation","ContainerName","ContainerDescription","Description","p","Button","button","Title","h1","MyName","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,iyECEpC,IAAMC,EAAaC,IAAOC,IAAV,KAMVC,EAASF,IAAOC,IAAV,KASNE,EAAYH,IAAOI,EAAV,KAQTC,EAAgBL,IAAOC,IAAV,KAObK,EAAmBN,IAAOC,IAAV,KAKhBM,EAA0BP,IAAOC,IAAX,KAItBO,EAAgBR,IAAOC,IAAV,KAYbQ,EAAuBT,IAAOC,IAAV,KAQpBS,EAAcV,IAAOW,EAAV,KAOXC,EAASZ,IAAOa,OAAV,KAaNC,EAAQd,IAAOe,GAAV,KAQLC,EAAShB,YAAOc,EAAPd,CAAH,KCxCJiB,MAhCf,WACE,OACE,kBAAClB,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,cACA,kBAACA,EAAD,mBACA,kBAACA,EAAD,iBAEF,kBAACE,EAAD,KACE,kBAACC,EAAD,KACE,kBAACQ,EAAD,gBACA,kBAACA,EAAD,kBACA,kBAACA,EAAD,mBAEF,kBAACP,EAAD,KACE,kBAACC,EAAD,KACE,kBAACM,EAAD,YACA,kBAACA,EAAD,aACA,kBAACE,EAAD,iBAEF,kBAACP,EAAD,KACE,kBAACC,EAAD,6BAMN,kBAACE,EAAD,oBChCcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4667806.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from 'styled-components';\r\n\r\nexport const Background = styled.div`\r\n  margin: 0;\r\n  background: #212121;\r\n  flex: 1;\r\n`;\r\n\r\nexport const NavBar = styled.div`\r\n  top: 0;\r\n  display: flex;\r\n  height: 100px;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  color: white;   \r\n`;\r\n\r\nexport const ItemsMenu = styled.a`\r\n  color: white;\r\n  margin: 0 50px;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\r\n`;\r\n\r\nexport const ContainerHome = styled.div`\r\n  margin: 20px 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n`;\r\n\r\nexport const ContainerWelcome = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n`;\r\n\r\nexport const ContainerApresentation  = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const ContainerName = styled.div`\r\n  margin: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  border: 2px solid white;\r\n  width: 350px;\r\n  height: 350px;\r\n  padding: 50px;\r\n\r\n`;\r\n\r\nexport const ContainerDescription = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Description = styled.p`\r\n  font-size: 48px;\r\n  color: white;\r\n  border: 2px solid white;\r\n  padding: 50px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: white;\r\n  align-self: center;\r\n  display: inline-block;\r\n  color: #212121;\r\n  font-size: 1em;\r\n  margin: 1em;\r\n  padding: 0.25em 1em;\r\n  border: 2px solid #212121;\r\n  border-radius: 1px;\r\n  display: block;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-weight: lighter;\r\n  font-size:48px;\r\n  color: white;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n  margin: 0;\r\n`;\r\n\r\nexport const MyName = styled(Title)`\r\n  font-weight: normal;\r\n`;","import React from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './home.css';\r\nimport { \r\n    Button, \r\n    Title,\r\n    MyName,\r\n    Background,\r\n    ContainerApresentation,\r\n    ContainerHome,\r\n    ContainerWelcome,\r\n    ItemsMenu,\r\n    ContainerName,\r\n    ContainerDescription,\r\n    Description,\r\n    NavBar} from './home.style';\r\n\r\nfunction Home() {\r\n  return (\r\n    <Background>\r\n      <NavBar>\r\n        <ItemsMenu>About</ItemsMenu>\r\n        <ItemsMenu>Experience</ItemsMenu>\r\n        <ItemsMenu>Contact</ItemsMenu>\r\n      </NavBar>\r\n      <ContainerHome>\r\n        <ContainerWelcome>\r\n          <Title>WELCOME</Title>\r\n          <Title>BEM-VINDO</Title>\r\n          <Title>BIENVENUE</Title>\r\n        </ContainerWelcome>\r\n        <ContainerApresentation>\r\n          <ContainerName>\r\n            <Title>Hi,</Title>\r\n            <Title>i am</Title>\r\n            <MyName>KauanCS</MyName>\r\n          </ContainerName>\r\n          <ContainerDescription>\r\n            <Description>\r\n            In Development...\r\n            </Description>\r\n          </ContainerDescription>\r\n        </ContainerApresentation>\r\n      </ContainerHome>\r\n      <Button>Read more</Button>\r\n    </Background>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Views/Home/home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Home />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}